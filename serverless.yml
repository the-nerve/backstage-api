# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: backstage-api

# app and org for use with dashboard.serverless.com
app: backstage-api
org: codingwithchris

# Configure Primary Serverless Function Provider
provider:
  name: aws
  region: us-east-2
  runtime: nodejs12.x
  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes
  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)
  stage: dev

# Configure API Endpoint Handler Functions
functions:
  ticketPurchased:
    handler: endpoints/tickets/purchased.purchased
    events:
      - http:
          path: tickets/purchased
          method: post

# COnfigure environment secrets. Shhhhh....
environment:
    MAILTRAP_USER: ${param:MAILTRAP_USER}
    MAILTRAP_PASS: ${param:MAILTRAP_PASS}
    POSTMARK_USER: ${param:POSTMARK_USER}
    POSTMARK_PASS: ${param:POSTMARK_USER}
    MAILCHIMP_API_KEY: ${param:MAILCHIMP_API_KEY}

# Configure our API to use a custom domain. (must also ALIAS S3 endpoint in Cloudflare)
custom:
  customDomain:
    endpointType: regional
    domainName: backstage.nervetheatre.org
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: '*.nervetheatre.org'
    createRoute53Record: false

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation
- serverless-domain-manager # Letserverles us use a custom domain for our API

#    The following are a few example events you can configure for api functions.
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"